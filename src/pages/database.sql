-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.admins (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid UNIQUE,
  admin_level character varying DEFAULT 'standard'::character varying CHECK (admin_level::text = ANY (ARRAY['super'::character varying, 'standard'::character varying, 'limited'::character varying]::text[])),
  permissions ARRAY,
  can_manage_users boolean DEFAULT false,
  can_manage_system boolean DEFAULT false,
  can_view_reports boolean DEFAULT true,
  last_login timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT admins_pkey PRIMARY KEY (id),
  CONSTRAINT admins_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.appointments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  patient_id uuid,
  doctor_id uuid,
  service_type text NOT NULL,
  reason text,
  appointment_date date NOT NULL,
  appointment_time time without time zone NOT NULL,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'confirmed'::text, 'cancelled'::text, 'completed'::text])),
  created_at timestamp without time zone DEFAULT now(),
  appointment_type text DEFAULT 'consultation'::text CHECK (appointment_type = ANY (ARRAY['consultation'::text, 'follow-up'::text, 'check-up'::text, 'emergency'::text])),
  consultation_type text DEFAULT 'in-person'::text CHECK (consultation_type = ANY (ARRAY['in-person'::text, 'video-call'::text, 'phone'::text])),
  duration_minutes integer DEFAULT 30,
  fee numeric,
  notes text,
  service_id text,
  updated_at timestamp with time zone DEFAULT now(),
  cancelled_by uuid,
  cancellation_reason text,
  reminder_sent boolean DEFAULT false,
  confirmed_at timestamp with time zone,
  CONSTRAINT appointments_pkey PRIMARY KEY (id),
  CONSTRAINT appointments_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(id),
  CONSTRAINT appointments_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.doctors(id),
  CONSTRAINT appointments_service_id_fkey FOREIGN KEY (service_id) REFERENCES public.services(id),
  CONSTRAINT appointments_cancelled_by_fkey FOREIGN KEY (cancelled_by) REFERENCES public.users(id)
);
CREATE TABLE public.audit_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  action character varying NOT NULL CHECK (action::text = ANY (ARRAY['create'::character varying, 'update'::character varying, 'delete'::character varying, 'login'::character varying, 'logout'::character varying, 'view'::character varying, 'download'::character varying]::text[])),
  table_name character varying NOT NULL,
  record_id uuid,
  old_values jsonb,
  new_values jsonb,
  ip_address inet,
  user_agent text,
  session_id character varying,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT audit_logs_pkey PRIMARY KEY (id),
  CONSTRAINT audit_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.doctor_analytics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  doctor_id uuid,
  analytics_date date NOT NULL,
  total_appointments integer DEFAULT 0,
  completed_appointments integer DEFAULT 0,
  cancelled_appointments integer DEFAULT 0,
  no_show_appointments integer DEFAULT 0,
  total_revenue numeric DEFAULT 0,
  average_consultation_time integer,
  patient_satisfaction_score numeric,
  total_patients_seen integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT doctor_analytics_pkey PRIMARY KEY (id),
  CONSTRAINT doctor_analytics_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.doctors(id)
);
CREATE TABLE public.doctor_schedules (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  doctor_id uuid,
  available_date date NOT NULL,
  start_time time without time zone NOT NULL,
  end_time time without time zone NOT NULL,
  CONSTRAINT doctor_schedules_pkey PRIMARY KEY (id),
  CONSTRAINT doctor_schedules_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.doctors(id)
);
CREATE TABLE public.doctor_templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  doctor_id uuid,
  template_type character varying NOT NULL CHECK (template_type::text = ANY (ARRAY['prescription'::character varying, 'medical_certificate'::character varying, 'referral'::character varying, 'consultation_notes'::character varying, 'discharge_summary'::character varying]::text[])),
  template_name character varying NOT NULL,
  content jsonb NOT NULL,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT doctor_templates_pkey PRIMARY KEY (id),
  CONSTRAINT doctor_templates_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.doctors(id)
);
CREATE TABLE public.doctors (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  specialty text NOT NULL,
  consultation_fee numeric NOT NULL,
  rating numeric DEFAULT 0,
  license_number character varying,
  years_experience integer,
  education text,
  certifications text,
  is_available boolean DEFAULT true,
  total_ratings integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  video_consultation_available boolean DEFAULT true,
  video_consultation_fee numeric DEFAULT 0,
  languages ARRAY,
  consultation_method_preference text DEFAULT 'in-person'::text CHECK (consultation_method_preference = ANY (ARRAY['in-person'::text, 'video-call'::text, 'both'::text])),
  bio text,
  hospital_affiliations ARRAY,
  CONSTRAINT doctors_pkey PRIMARY KEY (id),
  CONSTRAINT doctors_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.equipment (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name character varying NOT NULL,
  type USER-DEFINED NOT NULL,
  model character varying,
  serial_number character varying,
  location character varying,
  status USER-DEFINED DEFAULT 'available'::equipment_status,
  last_maintenance date,
  next_maintenance date,
  purchase_date date,
  warranty_expiry date,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT equipment_pkey PRIMARY KEY (id)
);
CREATE TABLE public.health_metrics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  patient_id uuid,
  metric_type text NOT NULL,
  value text NOT NULL,
  recorded_at timestamp without time zone DEFAULT now(),
  CONSTRAINT health_metrics_pkey PRIMARY KEY (id),
  CONSTRAINT health_metrics_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(id)
);
CREATE TABLE public.lab_tests (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  patient_id uuid,
  doctor_id uuid,
  appointment_id uuid,
  test_type text NOT NULL,
  result text,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  test_status character varying DEFAULT 'pending'::character varying CHECK (test_status::text = ANY (ARRAY['pending'::character varying, 'in_progress'::character varying, 'completed'::character varying, 'cancelled'::character varying]::text[])),
  reference_values text,
  abnormal_flags ARRAY,
  lab_technician_id uuid,
  result_notes text,
  CONSTRAINT lab_tests_pkey PRIMARY KEY (id),
  CONSTRAINT lab_tests_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(id),
  CONSTRAINT lab_tests_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.doctors(id),
  CONSTRAINT lab_tests_appointment_id_fkey FOREIGN KEY (appointment_id) REFERENCES public.appointments(id),
  CONSTRAINT lab_tests_lab_technician_id_fkey FOREIGN KEY (lab_technician_id) REFERENCES public.staff(id)
);
CREATE TABLE public.medical_records (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  patient_id uuid,
  doctor_id uuid,
  appointment_id uuid,
  diagnosis text,
  notes text,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  record_type character varying DEFAULT 'consultation'::character varying,
  treatment text,
  vitals jsonb,
  follow_up_required boolean DEFAULT false,
  follow_up_date date,
  CONSTRAINT medical_records_pkey PRIMARY KEY (id),
  CONSTRAINT medical_records_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(id),
  CONSTRAINT medical_records_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.doctors(id),
  CONSTRAINT medical_records_appointment_id_fkey FOREIGN KEY (appointment_id) REFERENCES public.appointments(id)
);
CREATE TABLE public.message_attachments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  message_id uuid NOT NULL,
  filename text NOT NULL,
  file_path text NOT NULL,
  file_size integer,
  file_type text NOT NULL,
  uploaded_at timestamp with time zone DEFAULT now(),
  CONSTRAINT message_attachments_pkey PRIMARY KEY (id),
  CONSTRAINT message_attachments_message_id_fkey FOREIGN KEY (message_id) REFERENCES public.messages(id)
);
CREATE TABLE public.message_threads (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  patient_id uuid NOT NULL,
  doctor_id uuid NOT NULL,
  appointment_id uuid,
  last_message_id uuid,
  last_message_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT message_threads_pkey PRIMARY KEY (id),
  CONSTRAINT message_threads_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.users(id),
  CONSTRAINT message_threads_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.users(id),
  CONSTRAINT message_threads_appointment_id_fkey FOREIGN KEY (appointment_id) REFERENCES public.appointments(id),
  CONSTRAINT message_threads_last_message_id_fkey FOREIGN KEY (last_message_id) REFERENCES public.messages(id)
);
CREATE TABLE public.messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  sender_id uuid NOT NULL,
  receiver_id uuid NOT NULL,
  appointment_id uuid,
  message_text text NOT NULL,
  message_type text DEFAULT 'text'::text CHECK (message_type = ANY (ARRAY['text'::text, 'image'::text, 'file'::text, 'voice'::text])),
  is_read boolean DEFAULT false,
  read_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT messages_pkey PRIMARY KEY (id),
  CONSTRAINT messages_sender_id_fkey FOREIGN KEY (sender_id) REFERENCES public.users(id),
  CONSTRAINT messages_receiver_id_fkey FOREIGN KEY (receiver_id) REFERENCES public.users(id),
  CONSTRAINT messages_appointment_id_fkey FOREIGN KEY (appointment_id) REFERENCES public.appointments(id)
);
CREATE TABLE public.notifications (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  title character varying NOT NULL,
  message text NOT NULL,
  type USER-DEFINED NOT NULL,
  priority USER-DEFINED DEFAULT 'medium'::notification_priority,
  is_read boolean DEFAULT false,
  related_appointment_id uuid,
  related_test_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT notifications_pkey PRIMARY KEY (id),
  CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT notifications_related_appointment_id_fkey FOREIGN KEY (related_appointment_id) REFERENCES public.appointments(id),
  CONSTRAINT notifications_related_test_id_fkey FOREIGN KEY (related_test_id) REFERENCES public.lab_tests(id)
);
CREATE TABLE public.package_services (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  package_id text NOT NULL,
  service_id text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT package_services_pkey PRIMARY KEY (id),
  CONSTRAINT package_services_package_id_fkey FOREIGN KEY (package_id) REFERENCES public.service_packages(id),
  CONSTRAINT package_services_service_id_fkey FOREIGN KEY (service_id) REFERENCES public.services(id)
);
CREATE TABLE public.patient_checkins (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  appointment_id uuid UNIQUE,
  patient_id uuid,
  staff_id uuid,
  checkin_method character varying DEFAULT 'manual'::character varying CHECK (checkin_method::text = ANY (ARRAY['manual'::character varying, 'qr_code'::character varying, 'kiosk'::character varying, 'mobile_app'::character varying]::text[])),
  status character varying DEFAULT 'checked_in'::character varying CHECK (status::text = ANY (ARRAY['checked_in'::character varying, 'waiting'::character varying, 'called'::character varying, 'in_consultation'::character varying, 'completed'::character varying]::text[])),
  checkin_time timestamp with time zone DEFAULT now(),
  called_time timestamp with time zone,
  consultation_start_time timestamp with time zone,
  notes text,
  CONSTRAINT patient_checkins_pkey PRIMARY KEY (id),
  CONSTRAINT patient_checkins_appointment_id_fkey FOREIGN KEY (appointment_id) REFERENCES public.appointments(id),
  CONSTRAINT patient_checkins_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(id),
  CONSTRAINT patient_checkins_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.users(id)
);
CREATE TABLE public.patient_documents (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  patient_id uuid,
  document_type character varying NOT NULL CHECK (document_type::text = ANY (ARRAY['insurance_card'::character varying, 'id_copy'::character varying, 'medical_certificate'::character varying, 'prescription'::character varying, 'lab_result'::character varying, 'medical_report'::character varying]::text[])),
  document_name character varying NOT NULL,
  file_path text NOT NULL,
  file_size integer,
  mime_type character varying,
  is_verified boolean DEFAULT false,
  verified_by uuid,
  verified_at timestamp with time zone,
  uploaded_at timestamp with time zone DEFAULT now(),
  CONSTRAINT patient_documents_pkey PRIMARY KEY (id),
  CONSTRAINT patient_documents_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(id),
  CONSTRAINT patient_documents_verified_by_fkey FOREIGN KEY (verified_by) REFERENCES public.users(id)
);
CREATE TABLE public.patient_preferences (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  patient_id uuid UNIQUE,
  language character varying DEFAULT 'en'::character varying,
  email_notifications boolean DEFAULT true,
  sms_notifications boolean DEFAULT true,
  app_notifications boolean DEFAULT true,
  appointment_reminders boolean DEFAULT true,
  privacy_data_sharing boolean DEFAULT false,
  marketing_emails boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT patient_preferences_pkey PRIMARY KEY (id),
  CONSTRAINT patient_preferences_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(id)
);
CREATE TABLE public.patient_reviews (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  patient_id uuid,
  doctor_id uuid,
  appointment_id uuid,
  rating integer CHECK (rating >= 1 AND rating <= 5),
  review_text text,
  is_anonymous boolean DEFAULT false,
  is_published boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT patient_reviews_pkey PRIMARY KEY (id),
  CONSTRAINT patient_reviews_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(id),
  CONSTRAINT patient_reviews_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.doctors(id),
  CONSTRAINT patient_reviews_appointment_id_fkey FOREIGN KEY (appointment_id) REFERENCES public.appointments(id)
);
CREATE TABLE public.patients (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  date_of_birth date,
  gender text,
  address text,
  emergency_contact_name character varying,
  emergency_contact_phone character varying,
  blood_type character varying,
  allergies text,
  medical_history text,
  insurance_provider character varying,
  insurance_number character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT patients_pkey PRIMARY KEY (id),
  CONSTRAINT patients_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.payments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  appointment_id uuid,
  amount numeric NOT NULL,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'paid'::text, 'failed'::text])),
  provider text DEFAULT 'PayMongo'::text,
  transaction_ref text,
  created_at timestamp without time zone DEFAULT now(),
  patient_id uuid,
  payment_type text DEFAULT 'consultation'::text CHECK (payment_type = ANY (ARRAY['consultation'::text, 'procedure'::text, 'package'::text, 'medication'::text, 'lab_test'::text])),
  payment_method text DEFAULT 'online'::text CHECK (payment_method = ANY (ARRAY['cash'::text, 'credit_card'::text, 'debit_card'::text, 'bank_transfer'::text, 'online'::text, 'insurance'::text])),
  payment_date timestamp with time zone,
  description text,
  doctor_id uuid,
  refunded_amount numeric DEFAULT 0,
  refunded_at timestamp with time zone,
  refund_reason text,
  updated_at timestamp with time zone DEFAULT now(),
  processing_fee numeric DEFAULT 0,
  CONSTRAINT payments_pkey PRIMARY KEY (id),
  CONSTRAINT payments_appointment_id_fkey FOREIGN KEY (appointment_id) REFERENCES public.appointments(id),
  CONSTRAINT payments_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(id),
  CONSTRAINT payments_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.doctors(id)
);
CREATE TABLE public.prescriptions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  medical_record_id uuid,
  medication_name text NOT NULL,
  dosage text,
  instructions text,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  prescription_status character varying DEFAULT 'active'::character varying CHECK (prescription_status::text = ANY (ARRAY['active'::character varying, 'completed'::character varying, 'cancelled'::character varying]::text[])),
  prescribed_by uuid,
  prescribed_date date DEFAULT CURRENT_DATE,
  duration_days integer,
  CONSTRAINT prescriptions_pkey PRIMARY KEY (id),
  CONSTRAINT prescriptions_medical_record_id_fkey FOREIGN KEY (medical_record_id) REFERENCES public.medical_records(id),
  CONSTRAINT prescriptions_prescribed_by_fkey FOREIGN KEY (prescribed_by) REFERENCES public.doctors(id)
);
CREATE TABLE public.service_packages (
  id text NOT NULL,
  name character varying NOT NULL,
  description text NOT NULL,
  original_price numeric NOT NULL,
  package_price numeric NOT NULL,
  savings numeric NOT NULL,
  duration character varying NOT NULL,
  is_active boolean DEFAULT true,
  popular boolean DEFAULT false,
  display_order integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT service_packages_pkey PRIMARY KEY (id)
);
CREATE TABLE public.services (
  id text NOT NULL,
  name character varying NOT NULL,
  category USER-DEFINED NOT NULL,
  description text NOT NULL,
  duration character varying NOT NULL,
  price numeric NOT NULL,
  preparation text,
  requirements ARRAY,
  is_available boolean DEFAULT true,
  home_service_available boolean DEFAULT false,
  equipment_required ARRAY,
  status USER-DEFINED DEFAULT 'available'::service_status,
  popular boolean DEFAULT false,
  display_order integer DEFAULT 0,
  doctor_specialty character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT services_pkey PRIMARY KEY (id)
);
CREATE TABLE public.staff (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  position text,
  department character varying,
  shift_schedule jsonb,
  role_permissions ARRAY,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT staff_pkey PRIMARY KEY (id),
  CONSTRAINT staff_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.staff_activities (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  staff_id uuid,
  activity_type character varying NOT NULL CHECK (activity_type::text = ANY (ARRAY['appointment_created'::character varying, 'payment_processed'::character varying, 'patient_checked_in'::character varying, 'document_verified'::character varying, 'task_completed'::character varying]::text[])),
  activity_description text,
  entity_type character varying,
  entity_id uuid,
  ip_address inet,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT staff_activities_pkey PRIMARY KEY (id),
  CONSTRAINT staff_activities_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id)
);
CREATE TABLE public.system_settings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  key character varying NOT NULL UNIQUE,
  value text,
  data_type character varying DEFAULT 'string'::character varying CHECK (data_type::text = ANY (ARRAY['string'::character varying, 'number'::character varying, 'boolean'::character varying, 'json'::character varying]::text[])),
  description text,
  is_public boolean DEFAULT false,
  category character varying DEFAULT 'general'::character varying,
  updated_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT system_settings_pkey PRIMARY KEY (id),
  CONSTRAINT system_settings_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.users(id)
);
CREATE TABLE public.tasks (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  assigned_to uuid NOT NULL,
  created_by uuid NOT NULL,
  title character varying NOT NULL,
  description text,
  priority USER-DEFINED DEFAULT 'medium'::task_priority,
  status USER-DEFINED DEFAULT 'pending'::task_status,
  due_date timestamp with time zone,
  completed_at timestamp with time zone,
  task_type USER-DEFINED NOT NULL,
  related_patient_id uuid,
  related_equipment_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT tasks_pkey PRIMARY KEY (id),
  CONSTRAINT tasks_related_equipment_id_fkey FOREIGN KEY (related_equipment_id) REFERENCES public.equipment(id),
  CONSTRAINT tasks_assigned_to_fkey FOREIGN KEY (assigned_to) REFERENCES public.users(id),
  CONSTRAINT tasks_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id),
  CONSTRAINT tasks_related_patient_id_fkey FOREIGN KEY (related_patient_id) REFERENCES public.patients(id)
);
CREATE TABLE public.user_online_status (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  is_online boolean DEFAULT false,
  last_seen timestamp with time zone DEFAULT now(),
  status_message text,
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_online_status_pkey PRIMARY KEY (id),
  CONSTRAINT user_online_status_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  email text NOT NULL UNIQUE,
  password text NOT NULL,
  phone text,
  role text NOT NULL CHECK (role = ANY (ARRAY['patient'::text, 'doctor'::text, 'staff'::text, 'admin'::text])),
  created_at timestamp without time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  profile_picture_url text,
  email_verified boolean DEFAULT false,
  phone_verified boolean DEFAULT false,
  last_login timestamp with time zone,
  timezone character varying DEFAULT 'UTC'::character varying,
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT users_pkey PRIMARY KEY (id)
);
CREATE TABLE public.video_call_participants (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  video_call_id uuid NOT NULL,
  user_id uuid NOT NULL,
  participant_id text NOT NULL,
  joined_at timestamp with time zone,
  left_at timestamp with time zone,
  is_host boolean DEFAULT false,
  mic_enabled boolean DEFAULT true,
  camera_enabled boolean DEFAULT true,
  screen_share_enabled boolean DEFAULT false,
  CONSTRAINT video_call_participants_pkey PRIMARY KEY (id),
  CONSTRAINT video_call_participants_video_call_id_fkey FOREIGN KEY (video_call_id) REFERENCES public.video_calls(id),
  CONSTRAINT video_call_participants_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.video_calls (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  appointment_id uuid NOT NULL,
  doctor_id uuid NOT NULL,
  patient_id uuid NOT NULL,
  call_link text NOT NULL,
  room_id text NOT NULL,
  status text DEFAULT 'scheduled'::text CHECK (status = ANY (ARRAY['scheduled'::text, 'ongoing'::text, 'completed'::text, 'cancelled'::text])),
  started_at timestamp with time zone,
  ended_at timestamp with time zone,
  duration_minutes integer,
  recording_url text,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  videosdk_meeting_id text,
  videosdk_token text,
  meeting_url text,
  participant_token text,
  is_recording boolean DEFAULT false,
  recording_started_at timestamp with time zone,
  recording_stopped_at timestamp with time zone,
  CONSTRAINT video_calls_pkey PRIMARY KEY (id),
  CONSTRAINT video_calls_appointment_id_fkey FOREIGN KEY (appointment_id) REFERENCES public.appointments(id),
  CONSTRAINT video_calls_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.doctors(id),
  CONSTRAINT video_calls_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(id)
);